
//////////////// FILE HEADER //////////////////////////
//
// Author:   Angela Galindo
//
///////////////////////////////////////////////////////

/**
 * Informational class to represent a booking in our system.
 */
public class Booking {

  // data fields associated with an individual Booking object
  private String confirmationNo; // generated by the getConfirmationNo() method
  private String seatNo; // generated by the Flight for this Booking
  private Flight flight;
  private Traveler traveler;

  // for use in the generateConfirmationNo method; do not change
  private static int confirmationNoGenerator = 1234;

  /**
   * Attempts to book a given traveler on a given flight and create a confirmation number for the
   * booking.
   * 
   * @param t the traveler for the booking
   * @param f the Flight to book the traveler on
   * @throws RuntimeException if there is no more room on the given flight
   */
  public Booking(Traveler t, Flight f) throws RuntimeException {
    // TODO: set the fields associated with this Booking
    // or throw a RuntimeException with a descriptive message if the Booking cannot be created
    this.traveler = t;
    this.flight = f;
    this.seatNo = flight.getNextAvailableSeat();
    this.confirmationNo = generateConfirmationNo();
    //flight.addBooking(this); // esto se puede hacer?? TODO
  }

  /**
   * Accessor method for this booking's seat number
   * 
   * @return
   */
  public String getSeatNo() {

    return this.seatNo; // TODO: complete this method according to the documentation
  }

  /**
   * Accessor method for this booking's confirmation number
   * 
   * @return
   */
  public String getConfirmationNo() {
    return this.confirmationNo; // TODO: complete this method according to the documentation
  }

  /**
   * Private helper method to generate a confirmation number for this booking. Should only be called
   * from the constructor of this class. This implementation is provided for you.
   * 
   * @return the generated confirmation number
   */
  private String generateConfirmationNo() {
    String confirmationNo = this.traveler.getName().toUpperCase().substring(0, 3);
    //System.out.println(confirmationNo);
    confirmationNo += confirmationNoGenerator;
    confirmationNoGenerator++;
    return confirmationNo;
  }

  /**
   * Protected helper method for testing purposes to reset the confirmation number generator. Call
   * this method at the beginning of your test methods. This implementation is provided for you.
   */
  protected static void resetConfirmationNo() {
    Booking.confirmationNoGenerator = 1234;
  }

  /**
   * Creates and returns a string representation of this booking for printing, for example:
   * 
   * Name: Hobbes LeGault 
   * Confirmation Number: HOB1240 
   * Flight Number: A234 
   * Seat Number: B2
   * 
   * @return a string representation of this booking for printing
   */
  @Override
  public String toString() {
    // Create the string we will be using to make the representation of the flight
    String bookString = "";

    // Get the name of the traveller
    bookString += "Name: " + traveler.getName() + "\n";

    // Get the confirmation number:
    bookString += "Confirmation Number: " + getConfirmationNo() + "\n";

    // Get the flight number
    bookString += "Flight Number: " + flight.getFlightNo() + "\n";

    // Get the seat number
    bookString += "Seat Number: " + getSeatNo() + "\n";

    return bookString; // TODO: complete this method according to the documentation
  }
}
